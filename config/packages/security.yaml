security:
    # Configuring the Encoder
    encoders:
        App\Entity\User:
            algorithm: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        # the provider key : This is called a "user provider". Each User class needs a corresponding "user provider"
        # This user class is necessery to the process of loading the user info from the session.
        # when you refresh the page, the User object is loaded from the session.
        # So, that's the job of the user provider. 
        # When we refresh, the user provider takes the User object from the session and uses its id to query for a fresh User object.
        # The user provider refresh the session (important)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    # Remember the authenticators: At the beginning of every request, Symfony calls a set of "authentication listeners", or "authenticators".
    # The job of each authenticator is to look at the request to see if there is any authentication info on it - 
    # like a submitted email & password or maybe an API token that's stored on a header. 
    # If an authenticator finds some info, it then tries to use it to find the user, 
    # check the password if there is one, and log in the user! Our job is to write these authenticators.
    # Remember authentication and authorization:
    #  Authentication is all about finding out who you are and making you prove it. It's the login process. 
    #  Authorization happens after authentication: it's all about determining whether or not you have access to something.
    # The whole job of the firewall is to authenticate you: to figure out who you are.
    # Symfony gave us two firewalls by default!
    # at the beginning of each request, Symfony determines the one firewall that matches the current request. 
    # It does that by comparing the URL to the regular expression pattern config.
    # And if you look closely... the first firewall is a fake!
    # In reality, we only have one real firewall called main :
    # And because it does not have a pattern key, it will be the active firewall for all URLs,
    # Anyways, because the job of a firewall is to authenticate the user, 
    # most of the config that goes below a firewall relates to "activating" new authentication listeners - 
    # those things that execute at the beginning of Symfony and try to log in the user.
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            # activate different ways to authenticate
            guard: 
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
            # As soon as you add this key, if the user checks a checkbox whose name is _remember_me , 
            # then a "remember me" cookie will be instantly set and used to log in the user if their session expires. 
            # This secret option is a cryptographic secret that's used to sign the data in that cookie. 
            # If you ever need a cryptographic secret, Symfony has a parameter called kernel.secret . 
            # Remember: anything surrounded by percent signs is a parameter. 
            # We never created this parameter directly: this is one of those built-in parameters that Symfony always makes available.
            # To see a list of all of the parameters : php bin/console debug:container --parameters
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 2592000 # 30 days in seconds

            

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # Authorization is all about deciding whether or not a user should have access to something
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
